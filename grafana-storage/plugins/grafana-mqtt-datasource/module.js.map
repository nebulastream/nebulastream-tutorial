{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"react\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"lodash\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./datasource.ts","webpack:///./handleEvent.ts","webpack:///./ConfigEditor.tsx","webpack:///./module.ts","webpack:///./QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\nimport { MqttDataSourceOptions, MqttQuery } from './types';\n\nexport class DataSource extends DataSourceWithBackend<MqttQuery, MqttDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<MqttDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  applyTemplateVariables(query: MqttQuery, scopedVars: ScopedVars): Record<string, any> {\n    let resolvedTopic = getTemplateSrv().replace(query.topic, scopedVars);\n    resolvedTopic = resolvedTopic.replace(/\\+/gi, '__PLUS__');\n    resolvedTopic = resolvedTopic.replace(/\\#/gi, '__HASH__');\n    const resolvedQuery: MqttQuery = {\n      ...query,\n      topic: resolvedTopic,\n    };\n\n    return resolvedQuery;\n  }\n}\n","import { ChangeEvent } from 'react';\nimport _ from 'lodash';\n\nexport const handlerFactory =\n  (original: object, onChange: (copy: any) => void) =>\n  (path: string, format: (value: string) => string | number | boolean | null = (value) => value) =>\n  (event: ChangeEvent<HTMLInputElement>): void => {\n    const copy = _.cloneDeep(original);\n    onChange(_.set(copy, path, format(event.currentTarget.value)));\n  };\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, InlineFieldRow, FieldSet, Input, SecretInput } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MqttDataSourceOptions, MqttSecureJsonData } from './types';\nimport { handlerFactory } from './handleEvent';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MqttDataSourceOptions, MqttSecureJsonData> {}\n\nexport const ConfigEditor = (props: Props) => {\n  const {\n    onOptionsChange,\n    options,\n    options: { jsonData, secureJsonData, secureJsonFields },\n  } = props;\n  const { uri, username } = jsonData;\n  const handleChange = handlerFactory(options, onOptionsChange);\n\n  const onPasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        password: event.target.value,\n      },\n    });\n  };\n\n  const onResetPassword = () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        password: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        password: '',\n      },\n    });\n  };\n\n  return (\n    <>\n      <FieldSet label=\"Connection\">\n        <InlineFieldRow>\n          <InlineField\n            label=\"URI\"\n            labelWidth={10}\n            tooltip=\"Supported schemes: TCP (tcp://), TLS (tls://), or WebSocket (ws://)\"\n          >\n            <Input\n              width={30}\n              name=\"uri\"\n              required\n              value={uri}\n              autoComplete=\"off\"\n              placeholder=\"tcp://localhost:1883\"\n              onChange={handleChange('jsonData.uri')}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      </FieldSet>\n\n      <FieldSet label=\"Authentication\">\n        <InlineFieldRow>\n          <InlineField label=\"Username\" labelWidth={10}>\n            <Input\n              width={30}\n              name=\"username\"\n              value={username}\n              autoComplete=\"off\"\n              onChange={handleChange('jsonData.username')}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Password\" labelWidth={10}>\n            <SecretInput\n              width={30}\n              name=\"password\"\n              isConfigured={!!secureJsonFields.password}\n              value={secureJsonData?.password ?? ''}\n              onChange={onPasswordChange}\n              onReset={onResetPassword}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      </FieldSet>\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { MqttQuery, MqttDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MqttQuery, MqttDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React from 'react';\nimport { Input, InlineFieldRow, InlineField } from '@grafana/ui';\nimport { QueryEditorProps } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { MqttDataSourceOptions, MqttQuery } from './types';\nimport { handlerFactory } from 'handleEvent';\n\ntype Props = QueryEditorProps<DataSource, MqttQuery, MqttDataSourceOptions>;\n\nexport const QueryEditor = (props: Props) => {\n  const { query, onChange, onRunQuery } = props;\n  const handleEvent = handlerFactory(query, onChange);\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Topic\" labelWidth={8} grow>\n          <Input\n            name=\"topic\"\n            required\n            placeholder='e.g. \"home/bedroom/temperature\"'\n            value={query.topic}\n            onBlur={onRunQuery}\n            onChange={handleEvent('topic')}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n};\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","__WEBPACK_EXTERNAL_MODULE__5__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","DataSource","instanceSettings","query","scopedVars","resolvedTopic","getTemplateSrv","replace","topic","DataSourceWithBackend","handlerFactory","original","onChange","path","format","event","copy","_","currentTarget","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","options","jsonData","secureJsonData","secureJsonFields","uri","username","handleChange","FieldSet","label","InlineFieldRow","InlineField","labelWidth","tooltip","Input","width","name","required","autoComplete","placeholder","SecretInput","isConfigured","password","target","onReset","setQueryEditor","onRunQuery","handleEvent","grow","onBlur"],"sourceRoot":""}