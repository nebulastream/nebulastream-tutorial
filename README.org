* Try out hierarchical topology                                                        :@comp:FOCUS:

- The coordinator has an internal worker with node ID 1 and IP address 172.31.0.2.
- =worker-1.yml= creates worker with ID 2 and IP address 172.31.0.3.
- =worker-2.yml= creates worker with ID 3 and IP address 172.31.0.4. Only this worker has a physical source.

** Topology after startup

Both workers are children of the coordinator.

#+begin_src json
{
  "edges": [
    {
      "source": 2,
      "target": 1
    },
    {
      "source": 3,
      "target": 1    # parent node of 3 is 1 (internal worker of coordinator)
    }
  ],
  "nodes": [
    {
      "available_resources": 65533,
      "id": 1,
      "ip_address": "172.31.0.2",
      "location": null,
      "nodeType": "NO_LOCATION"
    },
    {
      "available_resources": 65535,
      "id": 2,
      "ip_address": "172.31.0.3",
      "location": null,
      "nodeType": "NO_LOCATION"
    },
    {
      "available_resources": 65529,
      "id": 3,
      "ip_address": "172.31.0.4",
      "location": null,
      "nodeType": "NO_LOCATION"
    }
  ]
}
#+end_src

** Rewire topology 

- The order is important -- first add, then delete:

#+begin_src sh
curl -d '{"parentId": 2, "childId": 3}' http://localhost:8081/v1/nes/topology/addParent
curl -X DELETE -d '{"parentId": 1, "childId": 3}' http://localhost:8081/v1/nes/topology/removeParent
#+end_src

Both commands should print:

#+begin_src json
{"success":true}
#+end_src

** Topology after rewiring

#+begin_src json
{
  "edges": [
    {
      "source": 2,
      "target": 1
    },
    {
      "source": 3,
      "target": 2    # parent node of 3 is 2
    }
  ],
  "nodes": [
    {
      "available_resources": 65533,
      "id": 1,
      "ip_address": "172.31.0.2",
      "location": null,
      "nodeType": "NO_LOCATION"
    },
    {
      "available_resources": 65535,
      "id": 2,
      "ip_address": "172.31.0.3",
      "location": null,
      "nodeType": "NO_LOCATION"
    },
    {
      "available_resources": 65529,
      "id": 3,
      "ip_address": "172.31.0.4",
      "location": null,
      "nodeType": "NO_LOCATION"
    }
  ]
}
#+end_src

** Executing a query

E.g., JavaUdfExample with BottomUp placement.

Worker 3 has a source but it is not directly connected to worker 1 with the sink => data must flow through intermediary worker 2.

#+begin_example
[16:20:12.673860] [D] [thread 12] [QueryPlacementPhase.cpp:134] [execute] QueryPlacementPhase: Update Global Execution Plan:
ExecutionNode(id:1, ip:172.31.0.2, topologyId:1)
| QuerySubPlan(queryId:1, querySubPlanId:3)
|  SINK(5: {FileSinkDescriptor()})
|  |--SOURCE(14,,NetworkSourceDescriptor{tcp://172.31.0.3:40927 1::14::0::0})                          <---- Read data from intermediary worker
|--ExecutionNode(id:2, ip:172.31.0.3, topologyId:2)
|  | QuerySubPlan(queryId:1, querySubPlanId:4)
|  |  SINK(15: {NetworkSinkDescriptor(partition=1::14::0::0;nodeLocation=tcp://172.31.0.2:41461)})     <---- Send data to worker in coordinator
|  |  |--SOURCE(12,,NetworkSourceDescriptor{tcp://172.31.0.4:46033 1::12::0::0})                       <---- Read data from worker with data source
|  |--ExecutionNode(id:3, ip:172.31.0.4, topologyId:3)
|  |  | QuerySubPlan(queryId:1, querySubPlanId:2)
|  |  |  SINK(13: {NetworkSinkDescriptor(partition=1::12::0::0;nodeLocation=tcp://172.31.0.3:40927)})  <---- Send data to intermediary worker
|  |  |  |--MAP_UDF(11)                                                                                <---- Operations are pushed down (BottomUp placement)
|  |  |  |  |--PROJECTION(10, schema=points$x:Float(64 bits) points$y:Float(64 bits))
|  |  |  |  |  |--SOURCE(9,points,LogicalSourceDescriptor(points, points_1))
#+end_example
