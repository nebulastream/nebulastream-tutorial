* Description

The NebulaStream tutorial demonstrates how to download and configure NebulaStream, how to submit queries to and and visualize their results.

* IoTropolis -- the NebulaStream smart city

The tutorial is based on a smart city scenario, the NebulaStream IoTropolis.
In this smart city, wind turbines and solar panels /produce/ energy, whereas households, offices, factories, and street lights /consume/ energy.

Obviously, there must be a balance: if energy production is low, energy consumption must also be limited.
For example, in this tutorial, street lights are turned off at night when the wind is slow and wind turbines do not produce enough energy.

NebulaStream is used to gather measurements from energy producers and consumers, aggregate it, compute the difference between produced and consumed energy, and send out a signal that triggers a change of street light usage.

TODO: Animation

- Zoom into wind turbines and solar panels
- Show labels with aggregate information
- Zoom out
- Show street that street lights turn off
* Installation and execution

The tutorial is installed using [[https://docs.docker.com/compose/][Docker Compose]]:

#+begin_src sh
git clone https://github.com/nebulastream/nebulastream-tutorial
git checkout debs-2024-tutorial
cd nebulastream-tutorial
docker compose pull
docker compose up --build
#+end_src

In the last command, =--build= can be omitted from subsequent restarts of the containers.

* Docker services
:PROPERTIES:
:ID:       EE9DC662-28B7-4259-A49A-6ACB7C533D3C
:END:

The [[file:docker-compose.yml][docker-compose.yml]] file configures and starts the following Docker containers.

#+CAPTION: Docker services in the NebulaStream tutorial.
#+ATTR_HTML: :width 800
[[file:doc/docker-services.png]]

- *coordinator*: This Docker container runs the image =nebulastream/nebulastream-executable-image=.
  This image contains the binaries for both the NebulaStream coordinator and the NebulaStream worker, so we specify a custom entry point to run the coordinator.
  We also specify a configuration file for the coordinator, which is explained in the section [[#coordinator-configuration][Coordinator configuration]].

#+begin_src yaml
coordinator:
  image: nebulastream/nes-executable-image:latest
  entrypoint: "nesCoordinator --configPath=/tutorial/coordinator.yaml"
  ports:
    - 8081:8081
  volumes:
    - ./:/tutorial
#+end_src
  
- *consumers-worker*, *solarpanels-worker*, *windturbine-worker*: The Docker Compose configuration specifies multiple workers, which are configured to retrieve data from various data sources.
  These also use the =nebulastream/nebulastream-executable-image= image with a custom entry point that specifies a worker-specific configuration file. The example below shows the *consumers-worker*; other workers are configured similarly.

  #+begin_src yaml
consumers-worker:
  image: nebulastream/nes-executable-image:latest
  entrypoint: "nesWorker --configPath=/tutorial/consumersWorker.yaml"
  depends_on:
    - coordinator
  volumes:
    - ./:/tutorial
#+end_src

- *datatown*: This Docker container provides a 3D visualization of IoTropolis that runs in a web browser.
  The container also generates data for solar panels, wind turbines, and consumers.

  *Note:* The browser window running the 3D visualization must be open and visible on the screen in order for data to be generated.

  #+begin_src yaml
datatown:
  image: nebulastream/nes-smart-city-image:latest
  ports:
    - 9003:9003
#+end_src

- *ui*: This Docker container provides the web-based NebulaStream UI through which users can submit NebulaStream queries, monitor existing queries, and retrieve information about the NebulaStream cluster topology and available data sources.

  #+begin_src yaml
ui:
  image: nebulastream/nes-ui-image:latest
  ports:
    - 9000:9000
#+end_src

- *mosquitto*: The tutorial uses [[https://mosquitto.org/][Eclipse Mosquitto]] as an MQTT broker to exchange data between the data generator and the workers.
  The data generator publishes events from the different energy consumers and producers to different MQTT topics.
  NebulaStream workers subscribe to these topics as data sources and publish the results of a query to other MQTT topics.
  The 3D visualization also subscribes to predefined result topics in order to trigger changes in the 3D visualization.

  #+begin_src yaml
mosquitto:
  image: eclipse-mosquitto
  ports:
    - 1885:1885
    - 9001:9001
    - 9002:9002
  volumes:
    - ./mosquitto/config:/mosquitto/config
#+end_src

- *grafana*: The tutorial also uses [[https://grafana.com/][Grafana]] to visualize input data and query results.
  This container is custum-built with Docker Compose to provision a preinstalled MQTT datasource and custom dashboard for the tutorial.

  #+begin_src yaml
services:
  grafana:
    build: ./grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    volumes:
      - grafana-storage:/var/lib/grafana

volumes:
  grafana-storage: {}    
#+end_src

A number of Docker services, e.g., the coordinator, the data generator, the UI, Mosquitto, and Grafana, expose ports, so that we can interact with them on the host system.

The coordinator and the worker also mount the folder =resources/config/nebulastream=, so that we can provide configuration files to the container.

* Configuring NebulaStream

A minimal NebulaStream configuration must configure network options, as well as logical and physical sources.
Logical sources specify the data schema and are part of the coordinator configuration.
Physical sources specify how data is obtained and are part of the configuration of a worker.

** Coordinator configuration
:PROPERTIES:
:CUSTOM_ID: coordinator-configuration
:END:

The NebulaStream coordinator is configured through the file [[file:coordinator.yaml]] which is mounted in the Docker container in the folder =tutorial= and passed to the =--configPath= command option:

#+begin_src sh
nesCoordinator --configPath=/tutorial/coordinator.yaml
#+end_src

Further information: [[https://docs.nebula.stream/docs/use-nebulastream/configuration/#coordinator-configuration-options][NebulaStream documentation: Coordinator Configuration Options]]

*** Logging options

The configuration file first specifies a log level:

#+begin_src yaml
logLevel: LOG_ERROR
#+end_src

*** Networking options

Next, we specify network information.

- =restIp=: NebulaStream clients, e.g., the NebulaStream UI or the Java client, interact with the coordinator through a REST API. =restIp= specifies the IP address on which the coordinator listens for requests. The value =0.0.0.0= allows us to access the REST API from the host system.

- TODO What is =coordinatorHost= used for?

- The coordinator also starts an internal worker, for which we have to configure the hostname with the option =localWorkerHost=.
  The internal worker sits at the top of the NebulaStream cluster topology.
  It is also the worker on which sinks are executed.

The hostnames, e.g., =coordinator=, correspond to the service names in the [[id:EE9DC662-28B7-4259-A49A-6ACB7C533D3C][Docker Compose configuration]].

#+begin_src yaml
restIp: 0.0.0.0
coordinatorHost: coordinator

worker:
  localWorkerHost: coordinator
#+end_src

*** Logical sources

A logical source represents an stream of input tuples, possibly from muliple sensors, that share common characteristics. A logical has two properties:

- =logicalSourceName=: A unique identifier of the logical source.
- =fields=: The schema of the logical source, an unordered list of named and typed attribute.

NebulaStream supports the following data types:

- Signed integers with different bits: =INT8=, =INT16=, =INT32=, =INT64=
- Unsigned integers with different bits: =UINT8=, =UINT16=, =UINT32=, =UINT64=
- Floating points with different precision: =FLOAT32=, =FLOAT64=
- Booleans: =BOOLEAN=
- Variable-sized strings: =TEXT=

In the tutorial there are three logical sources: =windTurbines=, =solarPanels=, and =consumers=. The sources =windTurbines= and =solarPanels= have the same schema.

#+begin_src yaml
logicalSources:
  - logicalSourceName: "windTurbines"
    fields:
      - name: producerId
        type: INT8
      - name: groupId
        type: INT8
      - name: producedPower
        type: INT32
      - name: timestamp
        type: UINT64
  - logicalSourceName: "solarPanels"
    fields:
      - name: producerId
        type: INT8
      - name: groupId
        type: INT8
      - name: producedPower
        type: INT32
      - name: timestamp
        type: UINT64
  - logicalSourceName: "consumers"
    fields:
      - name: consumerId
        type: INT8
      - name: sectorId
        type: INT8
      - name: consumedPower
        type: INT32
      - name: consumerType
        type: TEXT
      - name: timestamp
        type: UINT64
#+end_src

*Note:* Fields that encode timestamps which are used in window operations must be =UINT64=.

*Note:* Java UDFs only support signed integers, except for =UINT64= to support timestamps and window operations.

Further information: [[https://docs.nebula.stream/docs/nebulastream/general-concepts/#defining-data-sources][NebulaStream documentation: Defining Data Sources]]

** Worker configuration 

Each NebulaStream worker is configured through a dedicated configuration file, which are mounted in the Docker container in the folder =tutorial= and passed to the =--configPath= command line option. For example, the =consumers= worker is started as follows:

#+begin_src sh
nesWorker --configPath=/tutorial/consumersWorker.yaml
#+end_src

Further information: [[https://docs.nebula.stream/docs/use-nebulastream/configuration/#worker-configuration-options][NebulaStream documentation: Worker Configuration Options]]

*** Logging options

The configuration file first specifies a log level:

#+begin_src yaml
logLevel: LOG_ERROR
#+end_src

*** Network options

Next, we specify network information.

- =coordinatorHost=: Hostname of the coordinator, to which the worker should register upon startup.

- =localWorkerHost=: Hostname under which this worker registers with the coordinator.

The hostnames, e.g., =coordinator=, correspond to the service names in the [[id:EE9DC662-28B7-4259-A49A-6ACB7C533D3C][Docker Compose configuration]].

#+begin_src yaml
coordinatorHost: coordinator
localWorkerHost: consumers-worker
#+end_src

*** Physical sources

A physical source connects to a concrete data source. Each physical source is associated with a specific logical source. The tuples provided by the data source have to match the schema of the logical source. Multiple physical sources can be associated with a single logical source, even across multiple NebulaStream workers. 

NebulaStream supports reading data from CSV files or from popular message brokers, such es MQTT, Kafka, or OPC, as data sources. In this tutorial, we use an MQTT broker as the data source for all physical sources.

A physical source is configured with the following options:

- =logicalSourceName=: The name of the associated logical source.
- =physicalSourceName=: The unique name of this physical source.
- =type=: The type of the data source, e.g., =MQTT_SOURCE=.
- =configuration=: Type-specific configuration options.

An MQTT source has the following configuration options:

- =url=: The URL of the MQTT broker.
- =clientId=: The client ID under which the source connects to the MQTT broker.

  *Note:* Every worker has to connect using a unique client ID.
- =topic=: The topic to which this physical source should subscribe.

TODO: Document additional fields and clean up.

#+begin_src yaml
physicalSources:
  - logicalSourceName: consumers
    physicalSourceName: consumers
    type: MQTT_SOURCE
    configuration:
      clientId: NES_source_consumers_
      userName: consumers
      url: ws://mosquitto:9001
      topic: consumers
      qos: 2
      inputFormat: JSON
      cleanSession: true
      flushIntervalMS: 10
#+end_src

Further information: [[https://docs.nebula.stream/docs/use-nebulastream/configuration/#physical-sources-configuration][NebulaStream documentation: Physical Sources Configuration]]

* Visualizing the input data

With Docker containers running, we can already visualize the generated input data in Grafana:

1. Open the 3D visualization at http://localhost:9003 to start the data generator.

   *Note:* This window must remain visible, otherwise data generation stops.

2. Open Grafana at http://localhost:3000.
   Grafana should open with the NebulaStream dashboard.
   The panels in the top row visualize the generated data, which is published on the MQTT topics =windturbines=, =solarpanels=, and =consumers=.
   The panels in the rows below are empty because there is no streaming query running yet in NebulaStream.

   TODO animation showing dashboards

   *Note:* When Grafana is started for the first time, the MQTT datasource is not yet configured.
   This is indicated by the error triangles on red background in the dashboard.
   Go to TODO, click on the datasource TODO, and enter =ws://mosquitto:9001= in the URI field.
   Then go to Home; the dashboard should now show data.
   The Docker container should persist the configured datasource between restart.

   TODO: animation with above steps.

Of course, the purpose of NebulaStream is to execute streaming queries.
We can submit queries to NebulaStream using the web UI, which we describe next.

* The NebulaStream web UI

The NebulaStream web UI can be accessed at http://localhost:9000. It provides the following functionality:

- Query catalog: Submit queries and monitor their status.
- Topology: Visualize the hierarchical network topology of the workers.
- Source catalog: Display information about the defined physical sources.
- Settings: Configure how the coordinator can be configured over the network.

** Query catalog



* Running NebulaStream queries

 NebulaStream supports queries with the following operators:

- Basic ETL operations, e.g., =filter=, =map=, =project= and =union=.
- Window aggregations. TODO Are sliding windows supported?
- Window-based joins of multiple logical sources.
- Java UDFs with Map and FlatMap semantics.
- TensorFlow Lite UDFs. TODO Not shown? Link to Java client example?

